constructor of Token
interface constructor(uint _supply)

iff
    CALLVALUE == 0

creates
    mapping(address => uint) balanceOf :=  [CALLER := _supply]

behaviour balanceOf of Token
interface balanceOf(address a)

iff

  CALLVALUE == 0

returns pre(balanceOf[a])


behaviour transferFrom of Token
interface transferFrom(uint256 value, address from, address to)

iff

  CALLVALUE == 0
  from =/= to => inRange(uint256, balanceOf[to] + value)
  inRange(uint256,balanceOf[from] - value)

case from =/= to:

  storage

    balanceOf[from]  => balanceOf[from] - value
    balanceOf[to]    => balanceOf[to] + value

  returns 1

case from == to:

  returns 1


constructor of Amm
interface constructor(address t0, address t1)

pointers
   t0 |-> Token
   t1 |-> Token

iff

    CALLVALUE == 0
    t0 =/= t1

creates

    Token token0 := t0 
    Token token1 := t1

behaviour swap0 of Amm
interface swap0(uint256 amt)

iff
    CALLVALUE == 0
    inRange(uint256,token0.balanceOf[CALLER] - amt)
    CALLER =/= THIS => inRange(uint256,token0.balanceOf[THIS] + amt)

    inRange(uint256,token1.balanceOf[THIS] - ((token1.balanceOf[THIS] * amt) / (token0.balanceOf[THIS] + amt)))
    CALLER =/= THIS => inRange(uint256,token1.balanceOf[CALLER] + ((token1.balanceOf[THIS] * amt) / (token0.balanceOf[THIS] + amt)))

    token0.balanceOf[THIS] + amt =/= 0

case CALLER =/= THIS:

storage

    token0.balanceOf[CALLER] => token0.balanceOf[CALLER] - amt
    token0.balanceOf[THIS]   => token0.balanceOf[THIS] + amt

    token1.balanceOf[THIS]   => token1.balanceOf[THIS] - ((token1.balanceOf[THIS] * amt) / (token0.balanceOf[THIS] + amt))
    token1.balanceOf[CALLER] => token1.balanceOf[CALLER] + ((token1.balanceOf[THIS] * amt) / (token0.balanceOf[THIS] + amt))

returns 1

case CALLER == THIS:

returns 1

ensures

    pre(token0.balanceOf[THIS]) * pre(token1.balanceOf[THIS]) <= post(token0.balanceOf[THIS]) * post(token1.balanceOf[THIS])
    post(token0.balanceOf[THIS]) * post(token1.balanceOf[THIS]) <= pre(token0.balanceOf[THIS]) * pre(token1.balanceOf[THIS]) + pre(token0.balanceOf[THIS]) + amt


behaviour swap1 of Amm
interface swap1(uint256 amt)

iff
    CALLVALUE == 0
    inRange(uint256,token1.balanceOf[CALLER] - amt)
    CALLER =/= THIS => inRange(uint256,token1.balanceOf[THIS] + amt)

    inRange(uint256,token0.balanceOf[THIS] - ((token0.balanceOf[THIS] * amt) / (token1.balanceOf[THIS] + amt)))
    CALLER =/= THIS => inRange(uint256,token0.balanceOf[CALLER] + ((token0.balanceOf[THIS] * amt) / (token1.balanceOf[THIS] + amt)))

    token1.balanceOf[THIS] + amt =/= 0

case CALLER =/= THIS:

storage

    token1.balanceOf[CALLER] => token1.balanceOf[CALLER] - amt
    token1.balanceOf[THIS]   => token1.balanceOf[THIS] + amt

    token0.balanceOf[THIS]   => token0.balanceOf[THIS] - ((token0.balanceOf[THIS] * amt) / (token1.balanceOf[THIS] + amt))
    token0.balanceOf[CALLER] => token0.balanceOf[CALLER] + ((token0.balanceOf[THIS] * amt) / (token1.balanceOf[THIS] + amt))

returns 1

case CALLER == THIS:

returns 1

ensures

    pre(token0.balanceOf[THIS]) * pre(token1.balanceOf[THIS]) <= post(token0.balanceOf[THIS]) * post(token1.balanceOf[THIS])
    post(token0.balanceOf[THIS]) * post(token1.balanceOf[THIS]) <= pre(token0.balanceOf[THIS]) * pre(token1.balanceOf[THIS]) + pre(token1.balanceOf[THIS]) + amt
